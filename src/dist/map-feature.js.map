{"version":3,"file":"map-feature.js","sources":["../src/map-feature.js"],"sourcesContent":["export class MapFeature extends HTMLElement {\n  static get observedAttributes() {\n    return ['zoom', 'min', 'max'];\n  }\n\n  /* jshint ignore:start */\n  #hasConnected;\n  /* jshint ignore:end */\n  get zoom() {\n    // for templated or queried features ** native zoom is only used for zoomTo() **\n    let meta = {},\n      metaEl = this.getMeta('zoom');\n    if (metaEl) meta = M._metaContentToObject(metaEl.getAttribute('content'));\n    if (this._parentEl.nodeName === 'MAP-LINK') {\n      // nativeZoom = zoom attribute || (sd.map-meta zoom 'value'  || 'max') || this._initialZoom\n      return +(this.hasAttribute('zoom')\n        ? this.getAttribute('zoom')\n        : meta.value\n        ? meta.value\n        : meta.max\n        ? meta.max\n        : this._initialZoom);\n    } else {\n      // for \"static\" features\n      // nativeZoom zoom attribute || this._initialZoom\n      // NOTE we don't use map-meta here, because the map-meta is the minimum\n      // zoom bounds for the layer, and is extended by additional features\n      // if added / removed during layer lifetime\n      return +(this.hasAttribute('zoom')\n        ? this.getAttribute('zoom')\n        : this._initialZoom);\n    }\n  }\n\n  set zoom(val) {\n    var parsedVal = parseInt(val, 10);\n    if (!isNaN(parsedVal) && parsedVal >= this.min && parsedVal <= this.max) {\n      this.setAttribute('zoom', parsedVal);\n    }\n  }\n\n  get min() {\n    // for templated or queried features ** native zoom is only used for zoomTo() **\n    let meta = {},\n      metaEl = this.getMeta('zoom');\n    if (metaEl) meta = M._metaContentToObject(metaEl.getAttribute('content'));\n    let projectionMinZoom = 0;\n    if (this._parentEl.nodeName === 'MAP-LINK') {\n      // minZoom = min attribute || sd.map-meta min zoom || map-link minZoom\n      return +(this.hasAttribute('min')\n        ? this.getAttribute('min')\n        : meta.min\n        ? meta.min\n        : this._parentEl.getZoomBounds().minZoom);\n    } else {\n      // for \"static\" features\n      // minZoom = min attribute || map-meta zoom || projection minZoom\n      return +(this.hasAttribute('min')\n        ? this.getAttribute('min')\n        : meta.min\n        ? meta.min\n        : projectionMinZoom);\n    }\n  }\n\n  set min(val) {\n    var parsedVal = parseInt(val, 10);\n    var layerZoomBounds = this.getLayerEl().extent.zoom;\n    if (!isNaN(parsedVal)) {\n      if (\n        parsedVal >= layerZoomBounds.minZoom &&\n        parsedVal <= layerZoomBounds.maxZoom\n      ) {\n        this.setAttribute('min', parsedVal);\n      } else {\n        this.setAttribute('min', layerZoomBounds.minZoom);\n      }\n    }\n  }\n\n  get max() {\n    // for templated or queried features ** native zoom is only used for zoomTo() **\n    let meta = {},\n      metaEl = this.getMeta('zoom');\n    if (metaEl) meta = M._metaContentToObject(metaEl.getAttribute('content'));\n    let projectionMaxZoom =\n      this.getMapEl()._map.options.crs.options.resolutions.length - 1;\n    if (this._parentEl.nodeName === 'MAP-LINK') {\n      // maxZoom = max attribute || sd.map-meta max zoom || map-link maxZoom\n      return +(this.hasAttribute('max')\n        ? this.getAttribute('max')\n        : meta.max\n        ? meta.max\n        : this._parentEl.getZoomBounds().maxZoom);\n    } else {\n      // for \"static\" features\n      // maxZoom = max attribute || map-meta zoom max || projection maxZoom\n      return +(this.hasAttribute('max')\n        ? this.getAttribute('max')\n        : meta.max\n        ? meta.max\n        : projectionMaxZoom);\n    }\n  }\n\n  set max(val) {\n    var parsedVal = parseInt(val, 10);\n    var layerZoomBounds = this.getLayerEl().extent.zoom;\n    if (!isNaN(parsedVal)) {\n      if (\n        parsedVal >= layerZoomBounds.minZoom &&\n        parsedVal <= layerZoomBounds.maxZoom\n      ) {\n        this.setAttribute('max', parsedVal);\n      } else {\n        this.setAttribute('max', layerZoomBounds.maxZoom);\n      }\n    }\n  }\n\n  get extent() {\n    if (this.isConnected) {\n      // if the feature extent is the first time to be calculated or the feature extent is changed (by changing\n      // the innertext of map-coordinates), then calculate feature extent by invoking the getFeatureExtent function\n      if (!this._getFeatureExtent) {\n        this._getFeatureExtent = this._memoizeExtent();\n      }\n      return this._getFeatureExtent();\n    }\n  }\n  getClosest(node, selector) {\n    if (!node) {\n      return null;\n    }\n    if (node instanceof ShadowRoot) {\n      return this.getClosest(node.host, selector);\n    }\n\n    if (node instanceof HTMLElement) {\n      if (node.matches(selector)) {\n        return node;\n      } else {\n        return this.getClosest(node.parentNode, selector);\n      }\n    }\n\n    return this.getClosest(node.parentNode, selector);\n  }\n  getMapEl() {\n    return this.getClosest(this, 'mapml-viewer,map[is=web-map]');\n  }\n  getLayerEl() {\n    return this.getClosest(this, 'layer-');\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (this.#hasConnected /* jshint ignore:line */) {\n      switch (name) {\n        case 'min':\n        case 'max':\n        case 'zoom':\n          if (oldValue !== newValue) {\n            this.reRender(this._featureLayer);\n          }\n          break;\n      }\n    }\n  }\n\n  constructor() {\n    // Always call super first in constructor\n    super();\n  }\n\n  connectedCallback() {\n    /* jshint ignore:start */\n    this.#hasConnected = true;\n    /* jshint ignore:end */\n    // set the initial zoom of the map when features connected\n    // used for fallback zoom getter for static features\n    this._initialZoom = this.getMapEl().zoom;\n    this._parentEl =\n      this.parentNode.nodeName.toUpperCase() === 'LAYER-' ||\n      this.parentNode.nodeName.toUpperCase() === 'MAP-LINK'\n        ? this.parentNode\n        : this.parentNode.host;\n    if (\n      this.getLayerEl().hasAttribute('data-moving') ||\n      this._parentEl.parentElement?.hasAttribute('data-moving')\n    )\n      return;\n    // use observer to monitor the changes in mapFeature's subtree\n    // (i.e. map-properties, map-featurecaption, map-coordinates)\n    this._observer = new MutationObserver((mutationList) => {\n      for (let mutation of mutationList) {\n        // the attributes changes of <map-feature> element should be handled by attributeChangedCallback()\n        if (mutation.type === 'attributes' && mutation.target === this) {\n          return;\n        }\n        // re-render feature if there is any observed change\n        this.reRender(this._featureLayer);\n      }\n    });\n    this._observer.observe(this, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeOldValue: true,\n      characterData: true\n    });\n  }\n\n  disconnectedCallback() {\n    if (\n      this.getLayerEl()?.hasAttribute('data-moving') ||\n      this._parentEl.parentElement?.hasAttribute('data-moving')\n    )\n      return;\n    this._observer.disconnect();\n    if (this._featureLayer) {\n      this.removeFeature(this._featureLayer);\n    }\n  }\n\n  reRender(layerToRenderOn) {\n    // this is for re-generating the rendering in case of <geometry> changes\n    // based on mutation observers. Kinda brute force.\n    if (this._groupEl.isConnected) {\n      let fallbackCS = this._getFallbackCS();\n      let placeholder = document.createElement('span');\n      this._groupEl.insertAdjacentElement('beforebegin', placeholder);\n      if (layerToRenderOn._staticFeature) {\n        layerToRenderOn._removeFromFeaturesList(this._geometry);\n      }\n      layerToRenderOn.removeLayer(this._geometry);\n      // Garbage collection needed\n      this._geometry = layerToRenderOn\n        .createGeometry(this, fallbackCS) // side effect: this._groupEl set\n        .addTo(layerToRenderOn);\n      placeholder.replaceWith(this._geometry.options.group);\n      layerToRenderOn._validateRendering();\n      // TODO: getBounds() should dynamically update the layerBounds and zoomBounds\n      delete this._getFeatureExtent;\n      this._setUpEvents();\n    }\n  }\n\n  removeFeature(layerToRemoveFrom) {\n    // layerToRemoveFrom is the L.LayerGroup or L.FeatureGroup to remove this\n    // feature from...\n    layerToRemoveFrom.removeLayer(this._geometry);\n    // TODO: MOVE THIS LOGIC TO layerToRemoveFrom.removeLayer(M.Geometry)\n    //    if (layerToRemoveFrom._staticFeature) {\n    //      if (layerToRemoveFrom._features[this.zoom]) {\n    //        this._removeInFeatureList(this.zoom);\n    //      }\n    if (layerToRemoveFrom._staticFeature) {\n      layerToRemoveFrom._removeFromFeaturesList(this._geometry);\n    }\n    layerToRemoveFrom.options.properties = null;\n    delete this._geometry;\n    // ensure that feature extent can be re-calculated everytime that map-feature element is updated / re-added\n    if (this._getFeatureExtent) delete this._getFeatureExtent;\n  }\n\n  addFeature(layerToAddTo) {\n    this._featureLayer = layerToAddTo;\n    let parentLayer = this.getLayerEl();\n    // \"synchronize\" the event handlers between map-feature and <g>\n    if (!this.querySelector('map-geometry')) return;\n    let fallbackCS = this._getFallbackCS();\n    let content = parentLayer.src ? parentLayer.shadowRoot : parentLayer;\n    this._geometry = layerToAddTo.createGeometry(this, fallbackCS); // side effect: extends `this` with this._groupEl, points to svg g element that renders to map SD\n    layerToAddTo.addLayer(this._geometry);\n    this._setUpEvents();\n  }\n\n  _setUpEvents() {\n    ['click', 'focus', 'blur', 'keyup', 'keydown'].forEach((name) => {\n      // when <g> is clicked / focused / blurred\n      // should dispatch the click / focus / blur event listener on **linked HTMLFeatureElements**\n      this._groupEl.addEventListener(name, (e) => {\n        if (name === 'click') {\n          // dispatch a cloned mouseevent to trigger the click event handlers set on HTMLFeatureElement\n          let clickEv = new PointerEvent(name, { cancelable: true });\n          clickEv.originalEvent = e;\n          this.dispatchEvent(clickEv);\n        } else if (name === 'keyup' || name === 'keydown') {\n          let keyEv = new KeyboardEvent(name, { cancelable: true });\n          keyEv.originalEvent = e;\n          this.dispatchEvent(keyEv);\n        } else {\n          // dispatch a cloned focusevent to trigger the focus/blue event handlers set on HTMLFeatureElement\n          let focusEv = new FocusEvent(name, { cancelable: true });\n          focusEv.originalEvent = e;\n          this.dispatchEvent(focusEv);\n        }\n      });\n    });\n  }\n\n  // native cs: used by FeatureLayer._geometryToLayer(...),\n  //            the fallback cs for map-geometry if its cs attribute is not specified\n  _getFallbackCS() {\n    let csMeta;\n    if (this._parentEl.nodeName === 'MAP-LINK') {\n      // feature attaches to link's shadow\n      csMeta =\n        this._parentEl.shadowRoot.querySelector('map-meta[name=cs]') ||\n        this._parentEl.parentElement.getMeta('cs');\n    } else {\n      let layerEl = this.getLayerEl();\n      csMeta = layerEl.src\n        ? layerEl.shadowRoot.querySelector('map-meta[name=cs]')\n        : layerEl.querySelector('map-meta[name=cs]');\n    }\n    if (csMeta) {\n      // M._metaContentObject(\"gcrs\") -> {content: \"gcrs\"}\n      return (\n        M._metaContentToObject(csMeta.getAttribute('content')).content || 'gcrs'\n      );\n    } else {\n      return 'gcrs';\n    }\n  }\n\n  // Util functions:\n  // internal method to calculate the extent of the feature and store it in cache for the first time\n  // and return cache when feature's extent is repeatedly requested\n  // for .extent\n  _memoizeExtent() {\n    // memoize calculated extent\n    let extentCache;\n    return function () {\n      if (extentCache && this._getFeatureExtent) {\n        // if the extent has already been calculated and is not updated, return stored extent\n        return extentCache;\n      } else {\n        // calculate feature extent\n        let map = this.getMapEl()._map,\n          geometry = this.querySelector('map-geometry'),\n          cs = geometry.getAttribute('cs') || this._getFallbackCS(),\n          // zoom level that the feature rendered at\n          zoom = this.zoom,\n          shapes = geometry.querySelectorAll(\n            'map-point, map-linestring, map-polygon, map-multipoint, map-multilinestring'\n          ),\n          bboxExtent = [\n            Infinity,\n            Infinity,\n            Number.NEGATIVE_INFINITY,\n            Number.NEGATIVE_INFINITY\n          ];\n        for (let shape of shapes) {\n          let coord = shape.querySelectorAll('map-coordinates');\n          for (let i = 0; i < coord.length; ++i) {\n            bboxExtent = _updateExtent(shape, coord[i], bboxExtent);\n          }\n        }\n        let topLeft = L.point(bboxExtent[0], bboxExtent[1]);\n        let bottomRight = L.point(bboxExtent[2], bboxExtent[3]);\n        let pcrsBound = M.boundsToPCRSBounds(\n          L.bounds(topLeft, bottomRight),\n          zoom,\n          map.options.projection,\n          cs\n        );\n        if (\n          shapes.length === 1 &&\n          shapes[0].tagName.toUpperCase() === 'MAP-POINT'\n        ) {\n          let projection = map.options.projection,\n            maxZoom = this.hasAttribute('max')\n              ? +this.getAttribute('max')\n              : M[projection].options.resolutions.length - 1,\n            tileCenter = M[projection].options.crs.tile.bounds.getCenter(),\n            pixel = M[projection].transformation.transform(\n              pcrsBound.min,\n              M[projection].scale(+this.zoom || maxZoom)\n            );\n          pcrsBound = M.pixelToPCRSBounds(\n            L.bounds(pixel.subtract(tileCenter), pixel.add(tileCenter)),\n            this.zoom || maxZoom,\n            projection\n          );\n        }\n        let result = Object.assign(\n          M._convertAndFormatPCRS(\n            pcrsBound,\n            map.options.crs,\n            map.options.projection\n          ),\n          { zoom: this._getZoomBounds() }\n        );\n        // memoize calculated result\n        extentCache = result;\n        return result;\n      }\n    };\n\n    // update the bboxExtent\n    function _updateExtent(shape, coord, bboxExtent) {\n      let data = coord.innerHTML\n        .trim()\n        .replace(/<[^>]+>/g, '')\n        .replace(/\\s+/g, ' ')\n        .split(/[<>\\ ]/g);\n      switch (shape.tagName.toUpperCase()) {\n        case 'MAP-POINT':\n          bboxExtent = M._updateExtent(bboxExtent, +data[0], +data[1]);\n          break;\n        case 'MAP-LINESTRING':\n        case 'MAP-POLYGON':\n        case 'MAP-MULTIPOINT':\n        case 'MAP-MULTILINESTRING':\n          for (let i = 0; i < data.length; i += 2) {\n            bboxExtent = M._updateExtent(bboxExtent, +data[i], +data[i + 1]);\n          }\n          break;\n        default:\n          break;\n      }\n      return bboxExtent;\n    }\n  }\n  _getZoomBounds() {\n    // ** native zoom is only used for zoomTo() **\n    return {\n      minZoom: this.min,\n      maxZoom: this.max,\n      minNativeZoom: this.zoom,\n      maxNativeZoom: this.zoom\n    };\n  }\n  getZoomToZoom() {\n    let tL = this.extent.topLeft.pcrs,\n      bR = this.extent.bottomRight.pcrs,\n      bound = L.bounds(\n        L.point(tL.horizontal, tL.vertical),\n        L.point(bR.horizontal, bR.vertical)\n      );\n    let projection = this.getMapEl()._map.options.projection,\n      layerZoomBounds = this.getLayerEl().extent.zoom,\n      minZoom = layerZoomBounds.minZoom ? layerZoomBounds.minZoom : 0,\n      maxZoom = layerZoomBounds.maxZoom\n        ? layerZoomBounds.maxZoom\n        : M[projection].options.resolutions.length - 1;\n    let newZoom;\n    if (this.hasAttribute('zoom')) {\n      // if there is a zoom attribute set to the map-feature, zoom to the zoom attribute value\n      newZoom = this.zoom;\n    } else {\n      // if not, calculate the maximum zoom level that can show the feature completely\n      newZoom = M.getMaxZoom(bound, this.getMapEl()._map, minZoom, maxZoom);\n      if (this.max < newZoom) {\n        // if the calculated zoom is greater than the value of max zoom attribute, go with max zoom attribute\n        newZoom = this.max;\n      } else if (this.min > newZoom) {\n        // if the calculated zoom is less than the value of min zoom attribute, go with min zoom attribute\n        newZoom = this.min;\n      }\n    }\n    // prevent overzooming / underzooming\n    if (newZoom < minZoom) {\n      newZoom = minZoom;\n    } else if (newZoom > maxZoom) {\n      newZoom = maxZoom;\n    }\n\n    // should check whether the extent after zooming falls into the templated extent bound\n    return newZoom;\n  }\n  getMeta(metaName) {\n    let name = metaName.toLowerCase();\n    if (name !== 'cs' && name !== 'zoom' && name !== 'projection') return;\n    let sdMeta = this._parentEl.shadowRoot.querySelector(\n      `map-meta[name=${name}][content]`\n    );\n    if (this._parentEl.nodeName === 'MAP-LINK') {\n      // sd.map-meta || map-extent meta || layer meta\n      return sdMeta || this._parentEl.parentElement.getMeta(metaName);\n    } else {\n      return this._parentEl.src\n        ? this._parentEl.shadowRoot.querySelector(\n            `map-meta[name=${name}][content]`\n          )\n        : this._parentEl.querySelector(`map-meta[name=${name}][content]`);\n    }\n  }\n  // internal support for returning a GeoJSON representation of <map-feature> geometry\n  // The options object can contain the following:\n  //      propertyFunction   - function(<map-properties>), A function that maps the features' <map-properties> element to a GeoJSON \"properties\" member.\n  //      transform          - Bool, Transform coordinates to gcrs values, defaults to True\n  // mapml2geojson: <map-feature> Object -> GeoJSON\n  mapml2geojson(options) {\n    let defaults = {\n      propertyFunction: null,\n      transform: true\n    };\n    // assign default values for undefined options\n    options = Object.assign({}, defaults, options);\n\n    let json = {\n      type: 'Feature',\n      properties: {},\n      geometry: {}\n    };\n    let el = this.querySelector('map-properties');\n    if (!el) {\n      json.properties = null;\n    } else if (typeof options.propertyFunction === 'function') {\n      json.properties = options.propertyFunction(el);\n    } else if (el.querySelector('table')) {\n      // setting properties when table presented\n      let table = el.querySelector('table').cloneNode(true);\n      json.properties = M._table2properties(table);\n    } else {\n      // when no table present, strip any possible html tags to only get text\n      json.properties = {\n        prop0: el.innerHTML.replace(/(<([^>]+)>)/gi, '').replace(/\\s/g, '')\n      };\n    }\n\n    // transform to gcrs if options.transform = true (default)\n    let source = null,\n      dest = null,\n      map = this.getMapEl()._map;\n    if (options.transform) {\n      source = new proj4.Proj(map.options.crs.code);\n      dest = new proj4.Proj('EPSG:4326');\n      if (\n        map.options.crs.code === 'EPSG:3857' ||\n        map.options.crs.code === 'EPSG:4326'\n      ) {\n        options.transform = false;\n      }\n    }\n\n    let collection = this.querySelector('map-geometry').querySelector(\n        'map-geometrycollection'\n      ),\n      shapes = this.querySelector('map-geometry').querySelectorAll(\n        'map-point, map-polygon, map-linestring, map-multipoint, map-multipolygon, map-multilinestring'\n      );\n\n    if (collection) {\n      json.geometry.type = 'GeometryCollection';\n      json.geometry.geometries = [];\n      for (let shape of shapes) {\n        json.geometry.geometries.push(\n          M._geometry2geojson(shape, source, dest, options.transform)\n        );\n      }\n    } else {\n      json.geometry = M._geometry2geojson(\n        shapes[0],\n        source,\n        dest,\n        options.transform\n      );\n    }\n    return json;\n  }\n\n  // a method that simulates a click, or invoking the user-defined click event\n  click() {\n    let g = this._groupEl,\n      rect = g.getBoundingClientRect();\n    let event = new MouseEvent('click', {\n      clientX: rect.x + rect.width / 2,\n      clientY: rect.y + rect.height / 2,\n      button: 0\n    });\n    let properties = this.querySelector('map-properties');\n    if (g.getAttribute('role') === 'link') {\n      for (let path of g.children) {\n        path.mousedown.call(this._geometry, event);\n        path.mouseup.call(this._geometry, event);\n      }\n    }\n    // dispatch click event for map-feature to allow events entered by 'addEventListener'\n    let clickEv = new PointerEvent('click', { cancelable: true });\n    clickEv.originalEvent = event;\n    this.dispatchEvent(clickEv);\n    // for custom projection, layer- element may disconnect and re-attach to the map after the click\n    // so check whether map-feature element is still connected before any further operations\n    if (properties && this.isConnected) {\n      let geometry = this._geometry,\n        shapes = geometry._layers;\n      // close popup if the popup is currently open\n      for (let id in shapes) {\n        if (shapes[id].isPopupOpen()) {\n          shapes[id].closePopup();\n        }\n      }\n      if (geometry.isPopupOpen()) {\n        geometry.closePopup();\n      } else if (!clickEv.originalEvent.cancelBubble) {\n        // If stopPropagation is not set on originalEvent by user\n        geometry.openPopup();\n      }\n    }\n  }\n\n  // a method that sets the current focus to the <g> element, or invoking the user-defined focus event\n  //      options (optional): as options parameter for native HTMLElement\n  //                          https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus\n  focus(options) {\n    this._groupEl.focus(options);\n  }\n\n  // a method that makes the <g> element lose focus, or invoking the user-defined blur event\n  blur() {\n    if (\n      document.activeElement.shadowRoot?.activeElement === this._groupEl ||\n      document.activeElement.shadowRoot?.activeElement.parentNode ===\n        this._groupEl\n    ) {\n      this._groupEl.blur();\n      // set focus to the map container\n      this.getMapEl()._map.getContainer().focus();\n    }\n  }\n\n  // a method that can the viewport to be centred on the feature's extent\n  zoomTo() {\n    let extent = this.extent,\n      map = this.getMapEl()._map;\n    let tL = extent.topLeft.pcrs,\n      bR = extent.bottomRight.pcrs,\n      bound = L.bounds(\n        L.point(tL.horizontal, tL.vertical),\n        L.point(bR.horizontal, bR.vertical)\n      ),\n      center = map.options.crs.unproject(bound.getCenter(true));\n    map.setView(center, this.getZoomToZoom(), { animate: false });\n  }\n  whenReady() {\n    return new Promise((resolve, reject) => {\n      let interval, failureTimer;\n      if (this.isConnected /* jshint ignore:line */) {\n        resolve();\n      } else {\n        let featureElement = this;\n        interval = setInterval(testForFeature, 200, featureElement);\n        failureTimer = setTimeout(featureNotDefined, 5000);\n      }\n      function testForFeature(featureElement) {\n        if (featureElement.isConnected /* jshint ignore:line */) {\n          clearInterval(interval);\n          clearTimeout(failureTimer);\n          resolve();\n        }\n      }\n      function featureNotDefined() {\n        clearInterval(interval);\n        clearTimeout(failureTimer);\n        reject('Timeout reached waiting for feature to be ready');\n      }\n    });\n  }\n}\n"],"names":["MapFeature","HTMLElement","observedAttributes","#hasConnected","zoom","let","meta","metaEl","this","getMeta","M","_metaContentToObject","getAttribute","_parentEl","nodeName","hasAttribute","value","max","_initialZoom","val","parsedVal","parseInt","isNaN","min","setAttribute","getZoomBounds","minZoom","layerZoomBounds","getLayerEl","extent","maxZoom","projectionMaxZoom","getMapEl","_map","options","crs","resolutions","length","isConnected","_getFeatureExtent","_memoizeExtent","getClosest","node","selector","ShadowRoot","host","matches","parentNode","attributeChangedCallback","name","oldValue","newValue","reRender","_featureLayer","constructor","super","connectedCallback","toUpperCase","parentElement","_observer","MutationObserver","mutation","mutationList","type","target","observe","childList","subtree","attributes","attributeOldValue","characterData","disconnectedCallback","disconnect","removeFeature","layerToRenderOn","_groupEl","fallbackCS","_getFallbackCS","placeholder","document","createElement","insertAdjacentElement","_staticFeature","_removeFromFeaturesList","_geometry","removeLayer","createGeometry","addTo","replaceWith","group","_validateRendering","_setUpEvents","layerToRemoveFrom","properties","addFeature","layerToAddTo","parentLayer","querySelector","src","shadowRoot","addLayer","forEach","addEventListener","clickEv","PointerEvent","cancelable","originalEvent","e","dispatchEvent","keyEv","KeyboardEvent","focusEv","FocusEvent","csMeta","layerEl","content","extentCache","map","geometry","cs","shapes","querySelectorAll","bboxExtent","Infinity","Number","NEGATIVE_INFINITY","shape","coord","i","data","innerHTML","trim","replace","split","tagName","_updateExtent","topLeft","L","point","bottomRight","pcrsBound","boundsToPCRSBounds","bounds","projection","tileCenter","tile","getCenter","pixel","transformation","transform","scale","pixelToPCRSBounds","subtract","add","result","Object","assign","_convertAndFormatPCRS","_getZoomBounds","minNativeZoom","maxNativeZoom","getZoomToZoom","tL","pcrs","bR","bound","horizontal","vertical","newZoom","getMaxZoom","metaName","toLowerCase","sdMeta","mapml2geojson","propertyFunction","json","el","table","cloneNode","_table2properties","prop0","source","dest","proj4","Proj","code","collection","geometries","push","_geometry2geojson","click","g","rect","getBoundingClientRect","event","MouseEvent","clientX","x","width","clientY","y","height","button","path","children","mousedown","call","mouseup","_layers","id","isPopupOpen","closePopup","cancelBubble","openPopup","focus","blur","activeElement","getContainer","zoomTo","center","unproject","setView","animate","whenReady","Promise","resolve","reject","interval","failureTimer","setInterval","featureElement","clearInterval","clearTimeout","setTimeout"],"mappings":"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"}